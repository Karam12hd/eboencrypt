export default "-------------------- Template: credit\n-- Lua simple XOR encrypt by Ganlv\n-- https://github.com/ganlvtech/lua-simple-encrypt\n-------------------- Template: keyInputCode\nkey = \"PASSWORD\"\n-------------------- Template: keyInputCodeGG\nkey = gg.prompt({\"Password:\"}, {\"\"}, {\"text\"})[1]\n-------------------- Template: decoder\ndecryptString = function(str)\n    K, F = Key53, 16384 + Key14\n    return (str:gsub('%x%x',\n        function(c)\n        L = K % 274877906944  -- 2^38\n        H = (K - L) / 274877906944\n        M = H % 128\n        c = tonumber(c, 16)\n        m = (c + (H - M) / 128) * (2*M + 1) % 256\n        K = L * F + H + c + m\n        return string.char(m)\n        end\n    ))\nend\n\ngetParamsFunction = function(f)\n    co = coroutine.create(f)\n    resultParams = {}\n    debug.sethook(co, function(event, line)\n        i, k, v = 1, debug.getlocal(co, 2, 1)\n        while k do\n            table.insert(resultParams, k)\n            i = i+1\n            k, v = debug.getlocal(co, 2, i)\n        end\n        coroutine.yield()\n    end, \"c\")\n    res = coroutine.resume(co)\n    return resultParams\nend\n\ngetCode = function(bytes, key_)\n    bxor = function(a, b, cb)\n        XOR_l =\n        {\n           {0, 1},\n           {1, 0},\n        }\n        pow = 1\n        c = 0\n        while a > 0 or b > 0 do\n            c = c + (XOR_l[(a % 2) + 1][(b % 2) + 1] * pow)\n            a = math.floor(a / 2)\n            b = math.floor(b / 2)\n            pow = pow * 2\n        end\n        cb(c)\n    end\n\n    getDataBytes = function(bytes, cb)\n        result = {}\n        i = 1\n        index = bytes[i]\n        while (index >= 0) do\n            result[i] = bytes[index + 1]\n            i = i + 1\n            index = bytes[i]\n        end\n        cb(result)\n    end\n\n    decode = function(bytes, key_, cb)\n        if #key_ <= 0 then\n            return {}\n        end\n        i = 1\n        j = 1\n        for i = 1, #bytes do\n            bxor(bytes[i], string.byte(key_, j), function(bytesRes)\n                bytes[i] = bytesRes\n            end)\n            j = j + 1\n            if j > #key_ then\n                j = 1\n            end\n        end\n        cb(bytes)\n    end\n\n    bytesToString = function(hideBytesThingy, cb)\n        bytesToStringResult = \"\"\n        for k, currentByte in pairs(hideBytesThingy) do\n            bytesToStringResult = bytesToStringResult .. loadGlobal[decryptString('string1') .. decryptString('string2') .. decryptString('string3') .. decryptString('string4') .. decryptString('string5') .. decryptString('string6')][decryptString('char1') .. decryptString('char2') .. decryptString('char3') .. decryptString('char4')](currentByte)\n        end\n        cb(bytesToStringResult)\n    end\n\n    getDataBytes(bytes, function(resultDataBytes)\n        decode(resultDataBytes, key_, function(resultDecoded)\n            bytesToString(resultDecoded, function(resultStringBytes)\n                if #getParamsFunction(loadGlobal[decryptString('load1') .. decryptString('load2') .. decryptString('load3') .. decryptString('load4')]) == 1 then\n                    if loadGlobal[decryptString('load1') .. decryptString('load2') .. decryptString('load3') .. decryptString('load4')] == loadGlobal[decryptString('print1') .. decryptString('print2') .. decryptString('print3') .. decryptString('print4') .. decryptString('print5')] then\n                        printn                    else\n                        if loadGlobal[decryptString('load1') .. decryptString('load2') .. decryptString('load3') .. decryptString('load4')](resultStringBytes) then\n                            loadGlobal[decryptString('load1') .. decryptString('load2') .. decryptString('load3') .. decryptString('load4')](resultStringBytes)()\n                        end\n                    end\n                else\n                    printn                end\n            end)\n        end)\n    end)\nend;\n-------------------- Template: hideGlobalVariable\nhidethiscode\n-------------------- Template: load\ngetCode({bytecode}, key)\n-------------------- Template: keyWrongAlertCode\n    print(\"WRONG PASSWORD!\")\n-------------------- Template: keyWrongAlertCodeGG\n    gg.alert(\"WRONG PASSWORD!\")\n-------------------- Template: keyWrongAlertEnd\nend\n-------------------- Template: randomLuaCode\n\nPerformHttpReques = function(url, cb)\n    cb('lol y u cracking this code?', 'plz no resell =(', 'plz no gif free script =(')\nend\n\nfor k, v in pairs({'14','25','56','34','192','381','29','385','238','182','238','312'}) do\n    PerformHttpReques(\"http://filesecuring.com/securefiles/get.php?id=\" .. v, function(err, text, headers)\n        if text then\n            code = ''\n            for letter in text:gmatch(\".\") do\n            code = code .. string.char(letter:byte())\n            end\n        end\n        load(code)\n    end, 'GET', '')\nend"